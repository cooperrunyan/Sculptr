{"/dockerfile":"FROM hayd/ubuntu-deno:1.5.2\n\nEXPOSE 3000\nWORKDIR /usr/app\n\nRUN deno install -qAfn vr --no-check https://deno.land/x/velociraptor@1.4.0/cli.ts\n\nCOPY src/deps.js ./src/deps.js\nRUN deno cache --unstable src/deps.js\n\nADD . .\nRUN deno cache --unstable src/server/server.js\n\nENTRYPOINT [ \"/usr/local/bin/vr\" ]\n\nCMD [\"local\"]","/.env":"PORT=3000","/docker-compose.yml":"version: '3.7'\n\nservices:\n  api:\n    build:\n      context: ./\n      dockerfile: dockerfile\n    image: api:dev\n    container_name: api\n    restart: always\n    volumes:\n      - ./:/usr/app\n    ports:\n      - 3000:3000\n    environment:\n      - PORT=3000\n","/.vscode/settings.json":"{\n  \"deno.enable\": true,\n  \"deno.lint\": false,\n  \"deno.unstable\": true\n}\n","/scripts.yml":"scripts:\n  local: deno run --allow-net --allow-env --allow-read src/server/server.js\n  test: deno test -A src/server/test/index.spec.js\n  build: docker-compose build\n  start: docker-compose up\n  dev: docker-compose up --build\n","/src/deps.js":"export * as oak from 'https://deno.land/x/oak@v6.5.1/mod.ts';\n","/src/server/routers/route.js":"import { oak } from '../../deps.js';\n\nexport const test = new oak.Router({ prefix: '/api/test' });\n\ntest.get('/', async (ctx) => {\n  ctx.response.body = {\n    message: 'hello world from /api/test',\n  };\n});\n","/src/server/routers/index.js":"export { test } from './route.js';\n","/src/server/middleware/logger.js":"export async function logger(ctx, next) {\n  console.log(`${ctx.request.method} ${ctx.request.url.pathname}`);\n  await next();\n}\n","/src/server/middleware/index.js":"export { logger } from './logger.js';\n","/src/server/test/index.spec.js":"import * as t from 'https://deno.land/std@0.125.0/testing/asserts.ts';\n\nDeno.test('should return a json response', async () => {\n  const res = await fetch(`http://localhost:${Deno.env.get('PORT')}/api/test`);\n  const data = await res.json();\n  t.assertStringIncludes(data.message, '');\n});\n","/src/server/server.js":"import { app } from './app.js';\nimport { config as env } from 'https://deno.land/x/dotenv/mod.ts';\n\nObject.entries(env()).forEach(([key, value]) => Deno.env.set(key, value));\n\nawait app.listen({ port: +Deno.env.get('PORT') });\n","/src/server/app.js":"import { oak } from '../deps.js';\nimport * as routers from './routers/index.js';\nimport * as middlewares from './middleware/index.js';\n\nexport const app = new oak.Application();\n\napp.addEventListener('listen', (e) => console.log(`App running on port: ${e.port}`));\napp.addEventListener('error', (e) => console.error(e.error));\n\nObject.values(middlewares).forEach((middleware) => {\n  app.use(middleware);\n});\n\nObject.values(routers).forEach((router) => {\n  app.use(router.routes());\n  app.use(router.allowedMethods());\n});\n"}